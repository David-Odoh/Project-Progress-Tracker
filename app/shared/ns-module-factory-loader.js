"use strict";
var core_1 = require("@angular/core");
var file_system_1 = require("file-system");
var SEPARATOR = "#";
var FACTORY_CLASS_SUFFIX = "NgFactory";
var FACTORY_PATH_SUFFIX = ".ngfactory";
var NSModuleFactoryLoader = (function () {
    function NSModuleFactoryLoader(compiler) {
        this.compiler = compiler;
        this.offlineMode = compiler instanceof core_1.Compiler;
    }
    NSModuleFactoryLoader.prototype.load = function (path) {
        var _a = this.splitPath(path), modulePath = _a.modulePath, exportName = _a.exportName;
        if (this.offlineMode) {
            return this.loadFactory(modulePath, exportName);
        }
        else {
            return this.loadAndCompile(modulePath, exportName);
        }
    };
    NSModuleFactoryLoader.prototype.loadFactory = function (modulePath, exportName) {
        modulePath = factoryModulePath(modulePath);
        exportName = factoryExportName(exportName);
        return System.import(modulePath)
            .then(function (module) { return module[exportName]; })
            .then(function (factory) { return checkNotEmpty(factory, modulePath, exportName); });
    };
    NSModuleFactoryLoader.prototype.loadAndCompile = function (modulePath, exportName) {
        modulePath = getAbsolutePath(modulePath);
        var loadedModule = require(modulePath)[exportName];
        checkNotEmpty(loadedModule, modulePath, exportName);
        return Promise.resolve(this.compiler.compileModuleAsync(loadedModule));
    };
    NSModuleFactoryLoader.prototype.splitPath = function (path) {
        var _a = path.split(SEPARATOR), modulePath = _a[0], exportName = _a[1];
        if (typeof exportName === "undefined") {
            exportName = "default";
        }
        return { modulePath: modulePath, exportName: exportName };
    };
    return NSModuleFactoryLoader;
}());
NSModuleFactoryLoader = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [core_1.Compiler])
], NSModuleFactoryLoader);
exports.NSModuleFactoryLoader = NSModuleFactoryLoader;
function getAbsolutePath(relativePath) {
    return file_system_1.path.normalize(file_system_1.path.join(file_system_1.knownFolders.currentApp().path, relativePath));
}
function factoryModulePath(modulePath) {
    return "" + modulePath + FACTORY_PATH_SUFFIX;
}
function factoryExportName(exportName) {
    return exportName === "default" ?
        exportName :
        "" + exportName + FACTORY_CLASS_SUFFIX;
}
function checkNotEmpty(value, modulePath, exportName) {
    if (!value) {
        throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
    }
    return value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnMtbW9kdWxlLWZhY3RvcnktbG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibnMtbW9kdWxlLWZhY3RvcnktbG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FLdUI7QUFFdkIsMkNBQWlEO0FBR2pELElBQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQztBQUN0QixJQUFNLG9CQUFvQixHQUFHLFdBQVcsQ0FBQztBQUN6QyxJQUFNLG1CQUFtQixHQUFHLFlBQVksQ0FBQztBQUd6QyxJQUFhLHFCQUFxQjtJQUc5QiwrQkFBb0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQyxJQUFJLENBQUMsV0FBVyxHQUFHLFFBQVEsWUFBWSxlQUFRLENBQUM7SUFDcEQsQ0FBQztJQUVELG9DQUFJLEdBQUosVUFBSyxJQUFZO1FBQ1QsSUFBQSx5QkFBK0MsRUFBOUMsMEJBQVUsRUFBRSwwQkFBVSxDQUF5QjtRQUVwRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDcEQsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZELENBQUM7SUFDTCxDQUFDO0lBRU8sMkNBQVcsR0FBbkIsVUFBb0IsVUFBa0IsRUFBRSxVQUFrQjtRQUN0RCxVQUFVLEdBQUcsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDM0MsVUFBVSxHQUFHLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTNDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQzthQUMzQixJQUFJLENBQUMsVUFBQyxNQUFXLElBQUssT0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQWxCLENBQWtCLENBQUM7YUFDekMsSUFBSSxDQUFDLFVBQUMsT0FBWSxJQUFLLE9BQUEsYUFBYSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLEVBQTlDLENBQThDLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBRU8sOENBQWMsR0FBdEIsVUFBdUIsVUFBa0IsRUFBRSxVQUFrQjtRQUN6RCxVQUFVLEdBQUcsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXpDLElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNuRCxhQUFhLENBQUMsWUFBWSxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUVwRCxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVPLHlDQUFTLEdBQWpCLFVBQWtCLElBQVk7UUFDdEIsSUFBQSwwQkFBZ0QsRUFBL0Msa0JBQVUsRUFBRSxrQkFBVSxDQUEwQjtRQUVyRCxFQUFFLENBQUMsQ0FBQyxPQUFPLFVBQVUsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFDM0IsQ0FBQztRQUVELE1BQU0sQ0FBQyxFQUFFLFVBQVUsWUFBQSxFQUFFLFVBQVUsWUFBQSxFQUFFLENBQUM7SUFDdEMsQ0FBQztJQUNMLDRCQUFDO0FBQUQsQ0FBQyxBQTVDRCxJQTRDQztBQTVDWSxxQkFBcUI7SUFEakMsaUJBQVUsRUFBRTtxQ0FJcUIsZUFBUTtHQUg3QixxQkFBcUIsQ0E0Q2pDO0FBNUNZLHNEQUFxQjtBQThDbEMseUJBQXlCLFlBQW9CO0lBQ3pDLE1BQU0sQ0FBQyxrQkFBSSxDQUFDLFNBQVMsQ0FBQyxrQkFBSSxDQUFDLElBQUksQ0FBQywwQkFBWSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ25GLENBQUM7QUFFRCwyQkFBMkIsVUFBVTtJQUNqQyxNQUFNLENBQUMsS0FBRyxVQUFVLEdBQUcsbUJBQXFCLENBQUM7QUFDakQsQ0FBQztBQUVELDJCQUEyQixVQUFVO0lBQ2pDLE1BQU0sQ0FBQyxVQUFVLEtBQUssU0FBUztRQUMzQixVQUFVO1FBQ1YsS0FBRyxVQUFVLEdBQUcsb0JBQXNCLENBQUM7QUFDL0MsQ0FBQztBQUVELHVCQUF1QixLQUFVLEVBQUUsVUFBa0IsRUFBRSxVQUFrQjtJQUNyRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDVCxNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFnQixVQUFVLGNBQVMsVUFBVSxNQUFHLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUNqQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBJbmplY3RhYmxlLFxuICAgIENvbXBpbGVyLFxuICAgIE5nTW9kdWxlRmFjdG9yeSxcbiAgICBOZ01vZHVsZUZhY3RvcnlMb2FkZXJcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgcGF0aCwga25vd25Gb2xkZXJzIH0gZnJvbSBcImZpbGUtc3lzdGVtXCI7XG5cbmRlY2xhcmUgdmFyIFN5c3RlbTogYW55O1xuY29uc3QgU0VQQVJBVE9SID0gXCIjXCI7XG5jb25zdCBGQUNUT1JZX0NMQVNTX1NVRkZJWCA9IFwiTmdGYWN0b3J5XCI7XG5jb25zdCBGQUNUT1JZX1BBVEhfU1VGRklYID0gXCIubmdmYWN0b3J5XCI7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOU01vZHVsZUZhY3RvcnlMb2FkZXIgaW1wbGVtZW50cyBOZ01vZHVsZUZhY3RvcnlMb2FkZXIge1xuICAgIHByaXZhdGUgb2ZmbGluZU1vZGU6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbXBpbGVyOiBDb21waWxlcikge1xuICAgICAgICB0aGlzLm9mZmxpbmVNb2RlID0gY29tcGlsZXIgaW5zdGFuY2VvZiBDb21waWxlcjtcbiAgICB9XG5cbiAgICBsb2FkKHBhdGg6IHN0cmluZyk6IFByb21pc2U8TmdNb2R1bGVGYWN0b3J5PGFueT4+IHtcbiAgICAgICAgbGV0IHttb2R1bGVQYXRoLCBleHBvcnROYW1lfSA9IHRoaXMuc3BsaXRQYXRoKHBhdGgpO1xuXG4gICAgICAgIGlmICh0aGlzLm9mZmxpbmVNb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkRmFjdG9yeShtb2R1bGVQYXRoLCBleHBvcnROYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRBbmRDb21waWxlKG1vZHVsZVBhdGgsIGV4cG9ydE5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsb2FkRmFjdG9yeShtb2R1bGVQYXRoOiBzdHJpbmcsIGV4cG9ydE5hbWU6IHN0cmluZyk6IFByb21pc2U8TmdNb2R1bGVGYWN0b3J5PGFueT4+IHtcbiAgICAgICAgbW9kdWxlUGF0aCA9IGZhY3RvcnlNb2R1bGVQYXRoKG1vZHVsZVBhdGgpO1xuICAgICAgICBleHBvcnROYW1lID0gZmFjdG9yeUV4cG9ydE5hbWUoZXhwb3J0TmFtZSk7XG5cbiAgICAgICAgcmV0dXJuIFN5c3RlbS5pbXBvcnQobW9kdWxlUGF0aClcbiAgICAgICAgICAgIC50aGVuKChtb2R1bGU6IGFueSkgPT4gbW9kdWxlW2V4cG9ydE5hbWVdKVxuICAgICAgICAgICAgLnRoZW4oKGZhY3Rvcnk6IGFueSkgPT4gY2hlY2tOb3RFbXB0eShmYWN0b3J5LCBtb2R1bGVQYXRoLCBleHBvcnROYW1lKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsb2FkQW5kQ29tcGlsZShtb2R1bGVQYXRoOiBzdHJpbmcsIGV4cG9ydE5hbWU6IHN0cmluZyk6IFByb21pc2U8TmdNb2R1bGVGYWN0b3J5PGFueT4+IHtcbiAgICAgICAgbW9kdWxlUGF0aCA9IGdldEFic29sdXRlUGF0aChtb2R1bGVQYXRoKTtcblxuICAgICAgICBsZXQgbG9hZGVkTW9kdWxlID0gcmVxdWlyZShtb2R1bGVQYXRoKVtleHBvcnROYW1lXTtcbiAgICAgICAgY2hlY2tOb3RFbXB0eShsb2FkZWRNb2R1bGUsIG1vZHVsZVBhdGgsIGV4cG9ydE5hbWUpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5jb21waWxlci5jb21waWxlTW9kdWxlQXN5bmMobG9hZGVkTW9kdWxlKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzcGxpdFBhdGgocGF0aDogc3RyaW5nKTogeyBtb2R1bGVQYXRoOiBzdHJpbmcsIGV4cG9ydE5hbWU6IHN0cmluZyB9IHtcbiAgICAgICAgbGV0IFttb2R1bGVQYXRoLCBleHBvcnROYW1lXSA9IHBhdGguc3BsaXQoU0VQQVJBVE9SKTtcblxuICAgICAgICBpZiAodHlwZW9mIGV4cG9ydE5hbWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIGV4cG9ydE5hbWUgPSBcImRlZmF1bHRcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IG1vZHVsZVBhdGgsIGV4cG9ydE5hbWUgfTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldEFic29sdXRlUGF0aChyZWxhdGl2ZVBhdGg6IHN0cmluZykge1xuICAgIHJldHVybiBwYXRoLm5vcm1hbGl6ZShwYXRoLmpvaW4oa25vd25Gb2xkZXJzLmN1cnJlbnRBcHAoKS5wYXRoLCByZWxhdGl2ZVBhdGgpKTtcbn1cblxuZnVuY3Rpb24gZmFjdG9yeU1vZHVsZVBhdGgobW9kdWxlUGF0aCkge1xuICAgIHJldHVybiBgJHttb2R1bGVQYXRofSR7RkFDVE9SWV9QQVRIX1NVRkZJWH1gO1xufVxuXG5mdW5jdGlvbiBmYWN0b3J5RXhwb3J0TmFtZShleHBvcnROYW1lKSB7XG4gICAgcmV0dXJuIGV4cG9ydE5hbWUgPT09IFwiZGVmYXVsdFwiID9cbiAgICAgICAgZXhwb3J0TmFtZSA6XG4gICAgICAgIGAke2V4cG9ydE5hbWV9JHtGQUNUT1JZX0NMQVNTX1NVRkZJWH1gO1xufVxuXG5mdW5jdGlvbiBjaGVja05vdEVtcHR5KHZhbHVlOiBhbnksIG1vZHVsZVBhdGg6IHN0cmluZywgZXhwb3J0TmFtZTogc3RyaW5nKTogYW55IHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGZpbmQgJyR7ZXhwb3J0TmFtZX0nIGluICcke21vZHVsZVBhdGh9J2ApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbn0iXX0=