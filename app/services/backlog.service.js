"use strict";
//angular imports
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
//3rd party imports
var _ = require("lodash");
//app imports
var _1 = require("./");
var mock_data_service_1 = require("./mock-data.service");
var static_data_1 = require("../shared/static-data");
var BacklogService = (function () {
    function BacklogService(mockDataService, userService, authService, zone) {
        var _this = this;
        this.mockDataService = mockDataService;
        this.userService = userService;
        this.authService = authService;
        this.zone = zone;
        this._genetatedItems = [];
        this._allItems = [];
        this._filteredItems = [];
        this._genetatedItems = this.mockDataService.generatePTItems(this.userService.users);
        this._itemsSubj = new Rx_1.BehaviorSubject([]);
        _.forEach(this._genetatedItems, function (item) {
            _this._allItems.push(item);
        });
        this._filterState = { filterViewIndex: 0 };
        this.publishUpdates();
        this._itemsObs = Rx_1.Observable.create(function (observer) {
            _this._observer = observer;
            observer.next(_this._allItems);
        });
    }
    Object.defineProperty(BacklogService.prototype, "itemsSubj", {
        get: function () {
            return this._itemsSubj;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BacklogService.prototype, "items", {
        get: function () {
            return this._genetatedItems;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BacklogService.prototype, "ptItemsObs", {
        get: function () {
            return this._itemsObs;
        },
        enumerable: true,
        configurable: true
    });
    BacklogService.prototype.getItem = function (id) {
        var selectedItem = _.find(this._allItems, function (i) { return i.id == id; });
        return Promise.resolve(selectedItem);
    };
    BacklogService.prototype.addNewPTItem = function (newItem, assignee) {
        var item = {
            id: _.uniqueId(),
            title: newItem.title,
            description: newItem.description,
            type: newItem.type,
            estimate: 0,
            priority: static_data_1.PriorityEnum.Medium,
            status: static_data_1.StatusEnum.Open,
            assignee: assignee,
            tasks: [],
            comments: [],
            dateCreated: new Date(),
            dateModified: new Date()
        };
        this.addItem(item);
    };
    BacklogService.prototype.addItem = function (item) {
        this._allItems.unshift(item);
        this._observer.next(this._allItems);
        this.publishUpdates();
    };
    BacklogService.prototype.deleteItem = function (item) {
        _.remove(this._allItems, function (ptitem) { return ptitem.id === item.id; });
        this.publishUpdates();
    };
    BacklogService.prototype.toggleTask = function (item, task) {
        var index = _.indexOf(item.tasks, task);
        task.completed = !task.completed;
        item.tasks.splice(index, 1, task);
    };
    BacklogService.prototype.updateTask = function (item, task, newTitle) {
        var index = _.indexOf(item.tasks, task);
        task.title = newTitle;
        item.tasks.splice(index, 1, task);
    };
    BacklogService.prototype.addTask = function (item, newTask) {
        var task = {
            id: _.uniqueId(),
            title: newTask.title,
            completed: newTask.completed,
            dateCreated: new Date(),
            dateModified: new Date()
        };
        item.tasks.unshift(task);
    };
    BacklogService.prototype.addComment = function (item, newComment) {
        var comment = {
            id: _.uniqueId(),
            title: newComment.title,
            user: _.find(this.userService.users, function (user) { return user.id === newComment.userId; }),
            dateCreated: new Date(),
            dateModified: new Date()
        };
        item.comments.unshift(comment);
    };
    BacklogService.prototype.updatePtItem = function (item) {
        this.publishUpdates();
    };
    BacklogService.prototype.updatePtItemEstimate = function (item, incdec) {
        if (item.estimate === 0 && !incdec)
            return;
        item.estimate = incdec ? item.estimate + 1 : item.estimate - 1;
        this.publishUpdates();
    };
    BacklogService.prototype.updatePtItemPriority = function (item, incdec) {
        if (static_data_1.PriorityEnum.isMax(item.priority) && incdec)
            return;
        if (static_data_1.PriorityEnum.isMin(item.priority) && !incdec)
            return;
        if (incdec) {
            item.priority = static_data_1.PriorityEnum.nextPriority(item.priority);
        }
        else {
            item.priority = static_data_1.PriorityEnum.previousPriority(item.priority);
        }
        this.publishUpdates();
    };
    BacklogService.prototype.updatePtItemType = function (item, newType) {
        item.type = newType;
        this.publishUpdates();
    };
    BacklogService.prototype.updatePtItemAssignee = function (item, user) {
        item.assignee = user;
        this.publishUpdates();
    };
    BacklogService.prototype.updatePtItemStatus = function (item, newStatusStr) {
        var newStatus = static_data_1.StatusEnum[newStatusStr];
        if (item.status != newStatus) {
            item.status = newStatus;
            this.publishUpdates();
        }
    };
    BacklogService.prototype.switchAssignee = function (item) {
        var ranUser = _.sample(this.userService.users);
        item.assignee = ranUser;
        this.publishUpdates();
    };
    BacklogService.prototype.filter = function (filterState) {
        this._filterState = filterState;
        this.publishUpdates();
    };
    BacklogService.prototype.publishUpdates = function () {
        var _this = this;
        var filteredItems = [];
        switch (this._filterState.filterViewIndex) {
            case 0:
                filteredItems = this._allItems.filter(function (i) { return i.assignee.id === _this.authService.currentUser.id; });
                break;
            case 1:
                filteredItems = this._allItems.filter(function (i) { return i.status === static_data_1.StatusEnum.Open || i.status === static_data_1.StatusEnum.ReOpened; });
                break;
            case 2:
                filteredItems = this._allItems.filter(function (i) { return i.status === static_data_1.StatusEnum.Closed; });
                break;
            default:
                filteredItems = this._allItems;
        }
        // Make sure all updates are published inside NgZone so that change detection is triggered if needed
        this.zone.run(function () {
            // must emit a *new* value (immutability!)
            _this.itemsSubj.next(filteredItems.slice());
        });
    };
    return BacklogService;
}());
BacklogService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [mock_data_service_1.MockDataService,
        _1.UserService,
        _1.AuthenticationService,
        core_1.NgZone])
], BacklogService);
exports.BacklogService = BacklogService;
//# sourceMappingURL=data:application/json;base64,