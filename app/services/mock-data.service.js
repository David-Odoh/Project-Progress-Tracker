"use strict";
//angular imports
var core_1 = require("@angular/core");
//nativescript imports
var fileSystemModule = require("file-system");
//3rd party imports
var faker = require("faker");
var _ = require("lodash");
//app imports
var constModule = require("../shared/constants");
var static_data_1 = require("../shared/static-data");
var MockDataService = (function () {
    function MockDataService() {
    }
    MockDataService.prototype.generatePTItems = function (users) {
        var _this = this;
        var items = _.times(constModule.NUM_PT_ITEMS, function () {
            return _this.generatePTItem(users);
        });
        return items;
    };
    MockDataService.prototype.generatePTItem = function (users) {
        var date = faker.date.past(1);
        var title = this.toTitleCase(faker.company.bs());
        var typeStr = static_data_1.ItemTypeEnum[_.random(1, 4)];
        var type = static_data_1.ItemTypeEnum[typeStr];
        var priorityStr = static_data_1.PriorityEnum[_.random(1, 4)];
        var priority = static_data_1.PriorityEnum[priorityStr];
        var statusStr = static_data_1.StatusEnum[_.random(1, 4)];
        var status = static_data_1.StatusEnum[statusStr];
        var ptItem = {
            id: faker.random.uuid(),
            title: title,
            dateCreated: date,
            dateModified: date,
            type: type,
            estimate: _.random(1, 24),
            priority: priority,
            status: status,
            assignee: _.sample(users),
            tasks: this.generateTasks(),
            comments: this.generateComments(users)
        };
        return ptItem;
    };
    MockDataService.prototype.generateTasks = function () {
        var _this = this;
        var numTasks = _.random(5, 20);
        var tasks = _.times(numTasks, function () {
            return _this.generateTask();
        });
        return tasks;
    };
    MockDataService.prototype.generateTask = function () {
        var date = faker.date.past(1);
        var title = this.toTitleCase(faker.company.bs());
        var task = {
            id: faker.random.uuid(),
            title: title,
            dateCreated: date,
            dateModified: date,
            completed: faker.random.boolean()
        };
        return task;
    };
    MockDataService.prototype.generateUsers = function () {
        var _this = this;
        //let avatarsMen = this.getUserAvatars('images/avatars/base64/men.txt');
        //let avatarsWomen = this.getUserAvatars('images/avatars/base64/women.txt');
        var avatarsLi = this.getUserLiUserAvatars('images/avatars/base64/base64.txt');
        var users = _.times(constModule.NUM_USERS, function () {
            //return this.generateUser(avatarsMen, avatarsWomen);
            return _this.generateUser(avatarsLi);
        });
        var userMe = this.getMeUser();
        users.unshift(userMe);
        return users;
    };
    MockDataService.prototype.getMeUser = function () {
        var avatarMe = this.getUserAvatars('images/avatars/base64/me.txt')[0];
        var userMe = {
            id: faker.random.uuid(),
            fullName: 'Alex Ziskind',
            avatar: avatarMe
        };
        return userMe;
    };
    MockDataService.prototype.generateUser = function (avatarsMen, avatarsWomen) {
        var genderBool = faker.random.boolean();
        var genderInt = parseInt(genderBool + '');
        var firstName = faker.name.firstName(genderInt);
        var lastName = faker.name.lastName(genderInt);
        var avatar;
        if (avatarsWomen) {
            avatar = genderBool ? _.sample(avatarsMen) : _.sample(avatarsWomen);
        }
        else {
            avatar = _.sample(avatarsMen);
        }
        var user = {
            id: faker.random.uuid(),
            fullName: firstName + ' ' + lastName,
            avatar: avatar
        };
        return user;
    };
    MockDataService.prototype.generateComments = function (users) {
        var _this = this;
        var numComments = _.random(0, 5);
        var comments = _.times(numComments, function () {
            return _this.generateComment(users);
        });
        return comments;
    };
    MockDataService.prototype.generateComment = function (users) {
        var date = faker.date.past(1);
        var commentText = this.toTitleCase(faker.lorem.sentence(20, 40));
        //let commentText = this.toTitleCase(faker.company.bs());
        var comment = {
            id: faker.random.uuid(),
            title: commentText,
            dateCreated: date,
            dateModified: date,
            user: _.sample(users)
        };
        return comment;
    };
    MockDataService.prototype.getUserAvatars = function (path) {
        var avatarList = [];
        var currentAppFolder = fileSystemModule.knownFolders.currentApp();
        var menAvatarsFile = currentAppFolder.getFile(path);
        var fileText = menAvatarsFile.readTextSync();
        var lines = fileText.split('\n');
        for (var i = 0; i < lines.length; i++) {
            avatarList.push('data:image/png;base64,' + lines[i]);
        }
        return avatarList;
    };
    MockDataService.prototype.getUserLiUserAvatars = function (path) {
        var avatarList = [];
        var currentAppFolder = fileSystemModule.knownFolders.currentApp();
        var menAvatarsFile = currentAppFolder.getFile(path);
        var fileText = menAvatarsFile.readTextSync();
        var lines = fileText.split('\n');
        for (var i = 0; i < lines.length; i++) {
            avatarList.push(lines[i]);
        }
        return avatarList;
    };
    MockDataService.prototype.toTitleCase = function (str) {
        return str.replace(/\w\S*/g, function (txt) { return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase(); });
    };
    MockDataService.prototype.pickRandomProperty = function (obj) {
        var result;
        var count = 0;
        for (var prop in obj)
            if (Math.random() < 1 / ++count)
                result = prop;
        return result;
    };
    return MockDataService;
}());
MockDataService = __decorate([
    core_1.Injectable()
], MockDataService);
exports.MockDataService = MockDataService;
//# sourceMappingURL=data:application/json;base64,